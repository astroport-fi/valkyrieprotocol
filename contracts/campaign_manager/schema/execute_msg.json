{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "code_id": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "deactivate_period": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "deposit_fee_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fund_manager": {
              "type": [
                "string",
                "null"
              ]
            },
            "governance": {
              "type": [
                "string",
                "null"
              ]
            },
            "key_denom": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Denom"
                },
                {
                  "type": "null"
                }
              ]
            },
            "min_referral_reward_deposit_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "referral_reward_token": {
              "type": [
                "string",
                "null"
              ]
            },
            "terraswap_router": {
              "type": [
                "string",
                "null"
              ]
            },
            "withdraw_fee_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "withdraw_fee_recipient": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_referral_reward_limit_option"
      ],
      "properties": {
        "update_referral_reward_limit_option": {
          "type": "object",
          "properties": {
            "base_count": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "overflow_amount_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "percent_for_governance_staking": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint16",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_reuse_overflow_amount"
      ],
      "properties": {
        "set_reuse_overflow_amount": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_campaign"
      ],
      "properties": {
        "create_campaign": {
          "type": "object",
          "required": [
            "config_msg",
            "executions"
          ],
          "properties": {
            "collateral_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "collateral_denom": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Denom"
                },
                {
                  "type": "null"
                }
              ]
            },
            "collateral_lock_period": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "config_msg": {
              "$ref": "#/definitions/Binary"
            },
            "executions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionMsg"
              }
            },
            "qualification_description": {
              "type": [
                "string",
                "null"
              ]
            },
            "qualifier": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Denom": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ExecutionMsg": {
      "type": "object",
      "required": [
        "contract",
        "msg",
        "order"
      ],
      "properties": {
        "contract": {
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "order": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
